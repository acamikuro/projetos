## Creating a simple chat app with React and MeteorJS. 

Since I started my studies (around 5 months ago) with vanilla JavaScript, all that I’ve been doing is trying to understand concepts needed to step ahead in my career. Part of my studies were directly streamed on [twitch.tv/acamikuro](https://twitch.tv/acamikuro), a place where I’m doing daily live coding sessions learning about programming. 

One of my goals is to learn different frameworks and understand the differences between them, and someone on my Twitch chat pointed out MeteorJS, a Fullstack framework that as I saw will receive a huge update soon and I thought ok why not?

## Table of Contents

- [Prologue](#prologue)   
- [Setup Environment](#setup-environment) 
	- [Installing Node and NVM](#installing-node-and-nvm)
	- [Installing Meteor](#installing-meteor)
	- [Creating a Meteor App](#creating-a-meteor-app)  
- [Project Structure](#project-structure)
- [Hands on Building the Project](#hands-on-building-the-project)
	- [Hands On Creating the ChatBox](#hands-on-creating-the-chatbox)
	- [Hands On Connecting with MongoDB](#hands-on-connecting-with-mongodb)
	- [Hands On Integrating our React Chat with MongoDB](#hands-on-integrating-our-react-chat-with-mongodb)
- [Final Considerations](#final-considerations)

## Prologue
![](https://lh7-us.googleusercontent.com/uAgwjELYImYwq8cGIqB0gU4enPU4iVseUkCUiIil84M5Dh6MfN0KpnhdYRAtyh3nHDtRDecGmVPiPngdkejJtWIJiCQnwi6DkfIh9rjM24uZ1VmQCImQlrMlanqyNjc9qmtLtf0JFf0JbpzKOkia3EM)

To start this new project, I will use a combination of MeteorJS and React to make a real-time chat app, from installing Meteor to integrating MongoDB with the chat.

It's worth noting that MongoDB is a very beginner-friendly database, which made this integration even more interesting.

## Setup Environment

The path to creating a real-time chat app with MeteorJS and React begins with preparing the environment, which in the case of Meteor 2 requires some special care. 

### Installing Node and NVM

An important fact about Meteor 2 is that it currently runs on Node 14, so we'll have to use the NVM (Node Version Manager) tool to change the usable version of the tool.

This specific version of Node.js is a choice to ensure compatibility and optimized performance when working with MeteorJS and React, where the [Meteor Software team itself is maintaining the version](https://blog.meteor.com/announcing-extended-support-maintenance-for-node-js-14-f9e8381f8bb5).

To install NMV you can use the command below: 

```bash
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
```

After you install NVM, reopen your terminal and check if the installation was successful: 

```
nvm --version 
# 0.39.0
```

Now you need to switch to the appropriate version to run MeteorJS 2 by using the command:

```bash
nvm install 14
# Downloading and installing node v14.21.3...
# Now using node v14.21.3 (npm v6.14.18)
```

Just to make sure, check if the node changed to the specified version after installation:

```bash
node --version
# v14.21.3
```


Now you're good to go to the Meteor CLI installation!

> After you use the version for Meteor, probably you will need to go back to the Node LTS. Use the command `nvm list` to check the available versions and `nvm install lts/*` then you will be on LTS again ;)

### Installing Meteor

Now that Node.js has been versioned, let's install Meteor on your system. 

For Windows, Linux, and OS X, you can run the following command:

```bash
npm install -g meteor
```

An alternative for Linux and OS X, is to install Meteor by using curl:

```bash
curl https://install.meteor.com/ | sh
```

If you are having issues with the installation, please consult the [official Meteor website](https://docs.meteor.com/install) for more step-by-step instructions. 
### Creating a Meteor App

When you run the `meteor create` command, you are starting the process of creating a new Meteor application, and remember that after "create" you need to enter the name of your app (e.g. `meteor create cami-chat`). This command generates the initial structure of your project, which I'll explain below. 

After creating the project, navigate to the newly created directory with the command `cd cami-chat`, then start the Meteor development client and server with `meteor`.

The application will be accessible at `http://localhost:3000` by default.

## Project Structure

![](https://i.imgur.com/FhlWGXC.png)

Now let's look at the generated files. Meteor creates an initial structure with directories such as "client" (client-side code), "server" (server-side code), and "imports" (for shared modules).

* **/.meteor:** This folder is vital for Meteor's internal configurations and dependencies
* **/client:** In this directory, you will focus on the specific client initialization code, loading the main component of React or your chosen framework.
* **/imports/api:** This folder centralizes everything related to the server side. In other words: routes, controllers, database connections, and so on.
* **/imports/ui:** The heart of your user interface is here. Create React components and UI elements in this directory.
* **/server/main.js:** This file is responsible for initializing our server.

Keep in mind that the database and some other necessary files will already be delivered by Meteor's dependency manager if you use the CLI.

Now that we have a brief idea and the environment prepared, we can start programming!

## Hands on Building the Project

The main aim of this project is to make a real-time chat application using the MeteorJS framework and React, easily and simply. MeteorJS has a fundamental role to play in simplifying real-time communication, while React makes it possible to create a dynamic interface.

Adding MongoDB gives our project a solid database for efficiently storing chat data. The collaboration between these technologies promises a fluid development experience, resulting in a chat application packed with features. 

### Hands On Creating the ChatBox

```javascript
import React from "react";
import { useFind } from "meteor/react-meteor-data";
import { ChatCollection } from "../api/Chat.js";

const ChatBox = () => {
  const [message, setMessage] = React.useState("");
  const [from, setFrom] = React.useState("");

  function handleSubmit(e) {
    e.preventDefault();
    ChatCollection.insert({
      message,
      from,
    });
    setMessage("");
  }

  return (
    <form onSubmit={handleSubmit}>
      <label>From:</label>
      <br />
      <input
        type="text"
        value={from}
        onChange={(e) => setFrom(e.target.value)}
      />
      <br />
      <label>Message:</label>
      <br />
      <input
        type="text"
        value={message}
        onChange={(e) => setMessage(e.target.value)}
      />
      <br />

      <button type="submit">Send</button>
    </form>
  );
}; 

const MessageList = ({ messages }) => {
  if (messages.length === 0) {
    return <div>No messages yet!</div>;
  }

  return (
    <ul>
      {messages.map(({ from, message, _id }) => (
        <li key={_id}>
          <span>
            {from}: {""}
          </span>
          <span>{message}</span>
        </li>
      ))}
    </ul>
  );
};

const MessageBoard = () => {
  const messages = useFind(() =>
    ChatCollection.find({})
  );

  return (
    <div>
      <h1>Messages</h1>
      <MessageList messages={messages} />
    </div>
  );
};

export const App = () => (
  <div>
    <h1>Welcome to our Chat!</h1>
    <ChatBox />
    <MessageBoard />
  </div>
);
```

Let's start with the practical part of the application. In the "imports/ui/" directory, the "App.jsx" file represents our React application using the Meteor framework, allowing users to send messages via a form (ChatBox) and displays all the messages sent in a list (MessageList). 

The `MessageBoard` component uses the `useFind` function from the **meteor/react-meteor-data** package to fetch messages from the `ChatCollection` and display them.

### Hands On Connecting with MongoDB

```javascript
import { Mongo } from 'meteor/mongo';

export const ChatCollection = new Mongo.Collection('chat');
```

This piece of code, which will be in the "imports/api/Chat.js" folder, will be responsible for defining and exporting a collection called `ChatCollection` that can be used elsewhere in the Meteor code to interact with chat-related documents in the MongoDB database.

### Hands On Integrating our React Chat with MongoDB

The combination of React and MongoDB elevates our chat application. This is because it is managed by Meteor itself, offering a set of features that simplify the development of real-time applications, including easy integration with MongoDB for data persistence. 

The integration of chat in React with MongoDB in Meteor takes place through the definition of a MongoDB collection on the server side, data manipulation (insertion) on the client side, and the use of the `useFind` function to get reactive data from MongoDB and display it dynamically in the React user interface.

Meteor takes care of real-time communication between the server and the client, allowing changes to the database to be automatically reflected in the user interface.

The synergy between React and MongoDB makes our chat application stand out. It explores the complexity of integrating the React interface with MongoDB, ensuring a continuous flow of real-time data for a dynamic user experience.

## Final Considerations

When I finished the whole application, I felt satisfied with the combination of MeteorJS and React. Whether you're an experienced developer or just starting in the field, like me, creating a real-time chat application with MeteorJS and React is an exciting experience, as it involves research, and testing and allows for creative expression with a personalized touch.

The possibilities are diverse, so use your creativity in the world of real-time communication to make an application like this too. This will be recorded in my projects on GitHub as another study I was able to do.
